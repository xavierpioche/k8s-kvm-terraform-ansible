- name: Check if master is initialized
  delegate_to: "{{ kubeadm_init_master }}"
  uri:
    url: "https://{{ endpoint }}.{{ dnsdomain }}:6443"
    validate_certs: no
    status_code: [403]
  register: result
  until: "result.status == 403"
  retries: 20
  delay: 5

- name: Check if master is ready
  delegate_to: "{{ kubeadm_init_master }}"
  shell: kubectl get nodes | grep " Ready"
  register: __cmd_res
  retries: 100
  delay: 5
  until: __cmd_res.stdout_lines | count > 0
  changed_when: __cmd_res.rc != 0

- name: Check if server already installed is ready
  delegate_to: "{{ kubeadm_init_master }}"
  shell: kubectl get nodes
  register: __cmd_res
  changed_when: __cmd_res.rc != 0

- name: Get join certificate command
  delegate_to: "{{ kubeadm_init_master }}"
  command: kubeadm init phase upload-certs --upload-certs
  register: __kubeadm_certs
  when: ansible_hostname not in __cmd_res.stdout

- name: Get token command
  delegate_to: "{{ kubeadm_init_master }}"
  command: kubeadm token create --print-join-command
  register: __kubeadm_token
  when: ansible_hostname not in __cmd_res.stdout

- name: pulling images to other workers
  ansible.builtin.command:
    cmd: "kubeadm config images pull --kubernetes-version {{ config_version }}"
  when: ansible_hostname not in __cmd_res.stdout and ansible_hostname in groups["workers"]

- name: Joining new worker to master
  shell: "{{ __kubeadm_token.stdout_lines[0] }} --certificate-key {{ __kubeadm_certs.stdout_lines[2] }} --apiserver-advertise-address={{ ansible_default_ipv4.address }}"
  when: ansible_hostname not in __cmd_res.stdout and ansible_hostname in groups["workers"]

- name: pulling images to other masters
  ansible.builtin.command:
    cmd: "kubeadm config images pull --kubernetes-version {{ config_version }}"
  when: ansible_hostname not in __cmd_res.stdout and ansible_hostname in groups["seconds"]

## 

- name: Get new certificate join command
  delegate_to: "{{ kubeadm_init_master }}"
  command: kubeadm init phase upload-certs --upload-certs
  register: __kubeadm_certs
  when: ansible_hostname in groups["second"]

- name: Get token command
  delegate_to: "{{ kubeadm_init_master }}"
  command: kubeadm token create --print-join-command
  register: __kubeadm_token
  when: ansible_hostname in groups["second"]

- name: Joining new master to master
  shell: "{{ __kubeadm_token.stdout_lines[0] }} --control-plane --certificate-key {{ __kubeadm_certs.stdout_lines[2] }} --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=all"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['second'] }}"
  when: ansible_hostname not in __cmd_res.stdout and ansible_hostname in groups["second"] and ansible_hostname == item

- name: Get new certificate join command
  delegate_to: "{{ kubeadm_init_master }}"
  command: kubeadm init phase upload-certs --upload-certs
  register: __kubeadm_certs
  when: ansible_hostname in groups["third"]

- name: Get token command
  delegate_to: "{{ kubeadm_init_master }}"
  command: kubeadm token create --print-join-command
  register: __kubeadm_token
  when: ansible_hostname in groups["third"]

- name: Joining new master to master
  shell: "{{ __kubeadm_token.stdout_lines[0] }} --control-plane --certificate-key {{ __kubeadm_certs.stdout_lines[2] }} --apiserver-advertise-address=0.0.0.0 --ignore-preflight-errors=all"
  delegate_to: "{{ item }}"
  with_items: "{{ groups['third'] }}"
  when: ansible_hostname not in __cmd_res.stdout and ansible_hostname in groups["third"] and ansible_hostname == item

